import { ArcDatum } from './types';
import { arc } from 'd3-shape';

/**
 * Constructs a new arc generator with the default settings and generates the path.
 *
 * Ensure that the accessors used with the arc generator correspond to
 * the arguments passed into them, or set them to constants as appropriate.
 *
 * @param shapeDatum Interface corresponding to the minimum data type assumed by the accessor functions of the Arc generator.
 * @param outerRadius Sets the outer radius to the specified number and returns this arc generator.
 * @param innerRadius Sets the inner radius to the specified number and returns this arc generator.
 * @param cornerRadius Computes the midpoint [x, y] of the center line of the arc that would be generated by the given arguments.
 * @param padAngle Sets the pad angle to the specified number and returns this arc generator.
 * @returns arc path
 */
export const generateArc = (
  shapeDatum: ArcDatum,
  outerRadius: number,
  innerRadius: number,
  cornerRadius: number = 0,
  padAngle: number = 0,
  padRadius: number = 0
) => {
  const arcGenerator = arc().outerRadius(outerRadius).innerRadius(innerRadius);
  if (cornerRadius) {
    arcGenerator.cornerRadius(cornerRadius);
  }
  if (padAngle) {
    arcGenerator.padAngle(padAngle);
  }
  if (padRadius) {
    arcGenerator.padRadius(padRadius);
  }
  return arcGenerator({
    startAngle: shapeDatum.startAngle,
    endAngle: shapeDatum.endAngle,
    innerRadius,
    outerRadius,
  });
};
